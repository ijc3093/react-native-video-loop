function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useState, useRef } from 'react';
export default function useFormData(initialData, isInitialDataForPlaceholder) {
  if (initialData === void 0) {
    initialData = {};
  }

  if (isInitialDataForPlaceholder === void 0) {
    isInitialDataForPlaceholder = null;
  }

  var _useState = useState(initialData),
      formData = _useState[0],
      setFormData = _useState[1];

  var initialFormData = useRef(initialData).current;

  var updateFormData = function updateFormData(key, evt) {
    switch (evt.target.type) {
      case 'button':
      case 'checkbox':
        setFormData(function (formData) {
          var _extends2;

          return _extends({}, formData, (_extends2 = {}, _extends2[key] = !formData[key], _extends2));
        });
        break;

      case 'number':
      case 'text':
        var value = evt.target.value;
        setFormData(function (formData) {
          var _extends3;

          return _extends({}, formData, (_extends3 = {}, _extends3[key] = value, _extends3));
        });
        break;

      default:
        setFormData(function (formData) {
          var _extends4;

          return _extends({}, formData, (_extends4 = {}, _extends4[key] = evt.target.value, _extends4));
        });
    }
  };

  return [formData, updateFormData, initialFormData, isInitialDataForPlaceholder];
}